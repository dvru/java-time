OOP - Object Oriented Programming, 4 types.

Inheritance
    - "is a" relationship between classes, where one class extends information from another
    - For ex. Car and a Vehicle, a Car extends from Vehicle, meaning a Car is a Vehicle
VS
Composition
    - "has a" relationship between classes, modeling part of the classes and then the classes alone.
    - For ex. PC has a Motherboard, a Monitor, and Case
        - Those classes also have other classes, Monitor "has a" resolution, Case "has a" Dimensions
        - PC then holds everything composed together, and a Motherboard, a Monitor, and Case
    - For ex. Bedroom has a wall, Ceiling, bed, lamp


Encapsulation
    - mechanism that allows you to restrict access to certain components in the objects that you are creating.
    - So, you're able to protect the members of a class from external access in order to really guard against unauthorized access.
        - We want the ability to override the code and have more control to them

    - For ex. A player should have a limited about of health points, given the validation and should not
      be able to change internally.
      -- By making our fields within a class Private, so that the class or fields are not accessible to any
        classes that are outside that particular class
      -- Keep things confined and protect the members of the class and methods from external access,
         So we're doing that to prevent unauthorized set up or access.

Polymorphism
    - Method or the mechanism in object oriented programming, that allows actions to act differently
      based on the actual object that the action is being performed on.
    - Need to create multiple classes
    -- It will automatically, if you're inheriting from another class, and you've got a method,
      and you override that method, that's what polymorphism is.
    -- It's giving unique functionality, for the class that has inherited from a base class.
    - For ex. A Movie class that has multiple movies extending from that main class, which includes unique methods
              within the main class so that it can call from.
              Movie has a plot and not plot method, if one of the movie classes has no plot method it will go back
              to the main movie class and call that method.
